stages:
- stage: 'Build'
  jobs:
  - job: 'Debug'
    strategy:
      matrix:
        ubuntu-20.04:
          imageName: 'ubuntu-20.04'
          artifactName: 'ubuntu2004'
          binDir: 'bin'
        # ubuntu-18.04:
        #   imageName: 'ubuntu-18.04'
        # ubuntu-16.04:
        #   imageName: 'ubuntu-16.04'
        # macOS-10.15:
        #   imageName: 'macOS-10.15'
        # macOS-10.14:
        #   imageName: 'macOS-10.14'
        # windows-2019:
        #   imageName: 'windows-2019'
        # vs2017-win2016:
        #   imageName: 'vs2017-win2016'
    pool:
      vmImage: $(imageName)
    steps:
    - script: |
        mkdir cmake-build-debug
        cd cmake-build-debug
        cmake .. -DCMAKE_BUILD_TYPE=Debug
      displayName: 'CMake'
    - script: |
        cd cmake-build-debug
        make --jobs
      displayName: 'Make'
      condition: ne( variables['Agent.OS'], 'Windows_NT' )
    - task: VSBuild@1
      inputs:
        solution: 'cmake-build-debug\tsc.sln'
        msbuildArgs: '-m'
      displayName: 'MSVC'
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
    - publish: cmake-build-debug/$(binDir)
      artifact: 'tsc-debug-$(artifactName)-$(Build.SourceVersion)'
- stage: 'Test'
  jobs:
    - job: 'Unit'
      strategy:
        matrix:
          ubuntu-20.04:
            imageName: 'ubuntu-20.04'
      pool:
        vmImage: $(imageName)
      steps:
      - checkout: none
      - download: current
        artifact: 'tsc-debug-$(artifactName)-$(Build.SourceVersion)'
      - bash: |
          cd ..
          chmod +x ./tsc-debug-$(artifactName)-$(Build.SourceVersion)/*
          tsc-debug-$(artifactName)-$(Build.SourceVersion)/test
        displayName: 'TSC Unit Tests'


# stages:
# - stage: 'Building'
#   jobs:
#   - job: 'Debug'
#     strategy:
#       matrix:
#         ubuntu2004:
#           imageName: 'ubuntu-20.04'
#           artifactName: 'ubuntu2004'
#           architecture: ''
#           binDir: 'bin'
#     pool:
#       vmImage: $(imageName)
#     steps:
#     - script: |
#         mkdir cmake-build-debug
#         cd cmake-build-debug
#         cmake .. $(architecture) -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON -DGENIE_USE_OPENMP=ON -DBUILD_DOCUMENTATION=OFF -DGENIE_WERROR=ON
#       displayName: 'Genie cmake'
#     - script: |
#         cd cmake-build-debug
#         make --jobs
#       displayName: 'Genie build (make)'
#       condition: ne( variables['Agent.OS'], 'Windows_NT' )
#     - task: VSBuild@1
#       inputs:
#         solution: 'cmake-build-debug\genie.sln'
#         msbuildArgs: '-m'
#       displayName: 'Genie build (MSVC)'
#       condition: eq( variables['Agent.OS'], 'Windows_NT' )
#     - publish: cmake-build-debug/$(binDir)
#       artifact: 'genie-debug-$(artifactName)-$(Build.SourceVersion)'
#   - job: 'Release'
#     strategy:
#       matrix:
#         ubuntu2004:
#           imageName: 'ubuntu-20.04'
#           artifactName: 'ubuntu2004'
#           architecture: ''
#           binDir: 'bin'
#         ubuntu1804:
#           imageName: 'ubuntu-18.04'
#           artifactName: 'ubuntu1804'
#           architecture: ''
#           binDir: 'bin'
#         ubuntu1604:
#           imageName: 'ubuntu-16.04'
#           artifactName: 'ubuntu1604'
#           architecture: ''
#           binDir: 'bin'
#         macos1015:
#           imageName: 'macos-10.15'
#           artifactName: 'macos1015'
#           architecture: ''
#           binDir: 'bin'
#         macos1014:
#           imageName: 'macos-10.14'
#           artifactName: 'macos1014'
#           architecture: ''
#           binDir: 'bin'
#         windows2016:
#           imageName: 'vs2017-win2016'
#           artifactName: 'windows2016'
#           architecture: '-A x64'
#           binDir: 'bin/Release'
#         windows2019:
#           imageName: 'windows-2019'
#           artifactName: 'windows2019'
#           architecture: '-A x64'
#           binDir: 'bin/Release'
#     pool:
#       vmImage: $(imageName)
#     steps:
#     - script: brew install libomp
#       displayName: 'Openmp installation (OSX)'
#       condition: eq( variables['Agent.OS'], 'Darwin' )
#     - script: |
#         mkdir cmake-build-release
#         cd cmake-build-release
#         cmake .. $(architecture) -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DGENIE_USE_OPENMP=ON -DBUILD_DOCUMENTATION=OFF -DGENIE_WERROR=ON
#       displayName: 'Genie cmake'
#     - script: |
#         cd cmake-build-release
#         make --jobs
#       displayName: 'Genie build (make)'
#       condition: ne( variables['Agent.OS'], 'Windows_NT' )
#     - task: VSBuild@1
#       inputs:
#         solution: 'cmake-build-release\genie.sln'
#         msbuildArgs: '-m'
#         configuration: 'Release'
#       displayName: 'Genie build (MSVC)'
#       condition: eq( variables['Agent.OS'], 'Windows_NT' )
#     - publish: cmake-build-release/$(binDir)
#       artifact: 'genie-release-$(artifactName)-$(Build.SourceVersion)'

# - stage: 'Testing'
#   jobs:
#   - job: 'Unit'
#     strategy:
#       matrix:
#         ubuntu2004:
#           imageName: 'ubuntu-20.04'
#           artifactName: 'ubuntu2004'
#           fileExt: ''
#         macos1014:
#           imageName: 'macos-10.14'
#           artifactName: 'macos1014'
#           fileExt: ''
#         windows2019:
#           imageName: 'windows-2019'
#           artifactName: 'windows2019'
#           fileExt: '.exe'
#     pool:
#       vmImage: $(imageName)
#     steps:
#     - checkout: none
#     - download: current
#       artifact: 'genie-debug-$(artifactName)-$(Build.SourceVersion)'
#     - bash: |
#         cd ..
#         chmod +x ./genie-debug-$(artifactName)-$(Build.SourceVersion)/*
#         genie-debug-$(artifactName)-$(Build.SourceVersion)/util-tests$(fileExt)
#       displayName: 'Genie run unit tests'
